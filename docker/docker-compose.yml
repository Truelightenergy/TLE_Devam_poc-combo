services:
  postgres:
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
    image: "postgres:15"
    ports:
      - "0.0.0.0:5432:5432"
  postgres-setup-1:
    depends_on:
      - postgres
    environment:
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - DATABASE=postgres
    image: "postgres:15"
    entrypoint:
      - /bin/bash
      - -c
      - |
        set -e
        sleep 10 # wait for postgres to be ready
        psql -v ON_ERROR_STOP=1 --username $${PGUSER} --dbname postgres --host $${DATABASE} --port 5432 <<-EOSQL
            CREATE USER docker;
            CREATE DATABASE trueprice;
            GRANT ALL PRIVILEGES ON DATABASE trueprice TO docker;
            -- GRANT ALL ON SCHEMA public TO demo;
            ALTER USER docker WITH encrypted password 'docker';
        EOSQL
  postgres-setup-2:
    depends_on:
      - postgres-setup-1
    environment:
      - PGUSER=docker
      - PGPASSWORD=docker
      - DATABASE=postgres
    image: "postgres:15"
    entrypoint:
      - bin/bash
      - -c
      - |
        set -e
        sleep 10
        psql -v ON_ERROR_STOP=1 --username $${PGUSER} --dbname trueprice --host $${DATABASE} --port 5432 <<-EOSQL
          CREATE SCHEMA trueprice;
          
          -- NYISO energy
          CREATE TABLE trueprice.nyiso_energy (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.nyiso_energy_history (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- ERCOT energy
          CREATE TABLE trueprice.ercot_energy (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.ercot_energy_history (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );


          -- ISONE energy

          CREATE TABLE trueprice.isone_energy (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.isone_energy_history (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          -- MISO energy
          CREATE TABLE trueprice.miso_energy (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.miso_energy_history (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          -- PJM energy
          CREATE TABLE trueprice.pjm_energy (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.pjm_energy_history (
            id serial PRIMARY KEY,
            cob BOOLEAN,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          

          -- ercot nonenergy
          CREATE TABLE trueprice.ercot_nonenergy (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.ercot_nonenergy_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          -- isone nonenergy
          CREATE TABLE trueprice.isone_nonenergy (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(12,8), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.isone_nonenergy_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(12,8), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          -- pjm nonenergy
          CREATE TABLE trueprice.pjm_nonenergy (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.pjm_nonenergy_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          -- nyiso nonenergy
          CREATE TABLE trueprice.nyiso_nonenergy (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.nyiso_nonenergy_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

        -- miso nonenergy
          CREATE TABLE trueprice.miso_nonenergy (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.miso_nonenergy_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );


          -- pjm rec
          -- new data
          CREATE TABLE trueprice.pjm_rec (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.pjm_rec_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          --ercot rec
          -- new data
          CREATE TABLE trueprice.ercot_rec (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.ercot_rec_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );


          --isone rec
          --new data
          CREATE TABLE trueprice.isone_rec (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.isone_rec_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );


        -- nyiso rec
        CREATE TABLE trueprice.nyiso_rec (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.nyiso_rec_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

          
        --Authentication table
        CREATE TABLE trueprice.users (
          id SERIAL PRIMARY KEY,
          email VARCHAR(255) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          privileged_level VARCHAR(255) NOT NULL,
          status text default 'enabled'
        );

        -- add new column to user table
        -- Alter table trueprice.users ADD COLUMN status text default 'enabled' ;

        -- status table for uploads
        CREATE TABLE trueprice.uploads(
          id serial PRIMARY KEY,
          timestamp TIMESTAMPTZ,
          email varchar(255),
          filename varchar(255)
        );

        -- site control
        CREATE TABLE trueprice.site(
          id serial PRIMARY KEY,
          admin varchar(100),
          ui_status varchar(100),
          api_status varchar(100)
        );

        -- insert to the sit table
        Insert into trueprice.site(admin, ui_status, api_status) VALUES ('tle_admin', 'enabled', 'enabled');

        -- column filtering
          CREATE TABLE trueprice.column_authorization(
            id serial PRIMARY KEY,
            control_table VARCHAR(255) NOT NULL,
            email VARCHAR(255) NOT NULL,
            startMonth TIMESTAMPTZ, -- per file name (sans tz)
            endMonth TIMESTAMPTZ, -- per file name (sans tz)
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            sub_cost_component varchar(100)
          );

        -- adding column to existing table
          ALTER TABLE trueprice.column_authorization
            ADD COLUMN balanced_month_range INT DEFAULT 0;




        --notification schema starts here

        -- languages table
        CREATE TABLE trueprice.languages (
            language_id SERIAL PRIMARY KEY,
            language_code VARCHAR(10) NOT NULL UNIQUE, -- e.g., 'en', 'es', 'fr'
            language_name VARCHAR(255) NOT NULL
        );

        -- email_templates table
        CREATE TABLE trueprice.email_templates (
            template_id SERIAL PRIMARY KEY,
            template_name VARCHAR(255) NOT NULL UNIQUE, -- e.g., 'PRICE_DROP', 'NEW_FEATURE'
            subject_template TEXT, -- Optional: subject can be multi-lingual too
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- email_template_contents table
        CREATE TABLE trueprice.email_template_contents (
            content_id SERIAL PRIMARY KEY,
            template_id INT REFERENCES trueprice.email_templates(template_id),
            language_id INT REFERENCES trueprice.languages(language_id),
            subject_content TEXT, -- Multi-lingual subject content
            body_content TEXT NOT NULL, -- Actual email content in HTML/Text
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- notification_events table to define possible events
        CREATE TABLE trueprice.notification_events (
            event_id SERIAL PRIMARY KEY,
            event_name VARCHAR(255) NOT NULL UNIQUE, -- e.g., 'PRICE_CHANGE', 'HEADROOM_CHANGE'
            description TEXT
        );

        -- notifications table
        CREATE TABLE trueprice.notifications (
            notification_id SERIAL PRIMARY KEY,
            user_id INT REFERENCES trueprice.trueprice.users(id), -- NULL for global (all users) notifications
            event_id INT REFERENCES trueprice.notification_events(event_id),
            template_id INT REFERENCES trueprice.email_templates(template_id),
            type VARCHAR(50) NOT NULL CHECK (type IN ('USER_DEFINED', 'SYSTEM')),
            is_global BOOLEAN NOT NULL DEFAULT FALSE, 
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- schedule_patterns table to store individual schedule patterns
        CREATE TABLE trueprice.schedule_patterns (
            pattern_id SERIAL PRIMARY KEY,
            notification_id INT REFERENCES trueprice.notifications(notification_id),
            cron_pattern VARCHAR(255) NOT NULL, -- cron-style scheduling string
            schedule_description TEXT, -- human-readable description of the schedule
            next_notification_time TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            recursive BOOLEAN DEFAULT false
        );

        -- notifications_log table to store sent notifications
        CREATE TABLE trueprice.notifications_log (
            log_id SERIAL PRIMARY KEY,
            notification_id INT REFERENCES trueprice.notifications(notification_id),
            user_id INT REFERENCES trueprice.users(id), -- to whom the notification was sent
            message TEXT NOT NULL, -- rendered message based on the message_template
            sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- price_changes_notifications to cater the changes in each uploads
        CREATE TABLE trueprice.price_changes_notifications (
          change_id SERIAL PRIMARY KEY,
          price_shift_value NUMERIC(20,10),
          price_shift_prct NUMERIC(20,10),
          price_shift TEXT,
          location TEXT,
          curvestart TIMESTAMPTZ,
          status TEXT DEFAULT 'waiting',
          retries NUMERIC DEFAULT 0,
          event_id INT REFERENCES trueprice.notification_events(event_id)
        );

        -- file uploads trigger
        CREATE TABLE trueprice.price_change_trigger(
          change_id SERIAL PRIMARY KEY,
          curvestart TIMESTAMPTZ,
          filename varchar(255),
          status varchar(255) Default 'waiting'
        );


        -- add language first
        INSERT INTO trueprice.languages (language_code, language_name)
            VALUES ('en', 'English');

        -- email_template
        INSERT INTO trueprice.email_templates (template_name, subject_template)
            VALUES ('PriceChange', 'Price changes');
        INSERT INTO trueprice.email_templates (template_name, subject_template)
            VALUES ('HeadroomChange', 'Headromm changes');

        -- email_template_content
        INSERT INTO trueprice.email_template_contents (template_id, language_id, subject_content, body_content)
          VALUES (1, 1, 'Price Change Alert', '<html><body><p>Dear {username},<br/> There has been a change in energy pricing in {location}.<br/> Energy has {price_shift} by {price_shift_value} resulting in a {price_shift_prct}.<br/>Your Friends at TRUEPrice </p></body></html>');
        INSERT INTO trueprice.email_template_contents (template_id, language_id, subject_content, body_content)
          VALUES (2, 1, 'Headroom Change Alert', '<html><body><p>We are here to inform you about the recent Headroom changes...</p></body></html>');

        -- notification_events
        INSERT INTO trueprice.notification_events (event_name, description)
          VALUES ('PRICE_CHANGE', 'Notification sent when there is a PRICE change in monitored.');
        INSERT INTO trueprice.notification_events (event_name, description)
          VALUES ('HEADROOM_CHANGE', 'Notification sent when there is a HEDROOM change in monitored.');

        --notification
        INSERT INTO trueprice.notifications (user_id, event_id, template_id, type, is_global)
          VALUES (NULL, 1, 1, 'SYSTEM', true);  --price drop
        INSERT INTO trueprice.notifications (user_id, event_id, template_id, type, is_global)
          VALUES (NULL, 2, 2, 'SYSTEM', true);  --price hike


        --schedule the notification
        INSERT INTO trueprice.schedule_patterns (notification_id, cron_pattern, schedule_description, next_notification_time)
          VALUES (1, '0 8 * * MON', 'Every Monday at 8:00 AM', '2023-08-14 08:00:00');
        INSERT INTO trueprice.schedule_patterns (notification_id, cron_pattern, schedule_description, next_notification_time)
          VALUES (2, '0 8 * * MON', 'Every Monday at 8:00 AM', '2023-08-14 08:00:00');

        --notification schema ends here

        --graph view schema starts here

        -- file uploads trigger

        -- save the graphview table

        CREATE TABLE trueprice.save_graphview(
          change_id SERIAL PRIMARY KEY,
          url varchar(255),
          user_id INT REFERENCES trueprice.trueprice.users(id),
          status varchar(255)
        );

        --graph view schema ends here

        -- PTC schema starts from here

          -- new data
          CREATE TABLE trueprice.ptc (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            control_area_type varchar(100),
            data NUMERIC(20,10), 
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            utility_name varchar(100),
            profile_load varchar(100)
          );
          
          -- old data
          -- union old and new data for all data (versus is_current column)
          CREATE TABLE trueprice.ptc_history (
            id serial PRIMARY KEY,
            curveStart TIMESTAMPTZ, -- per file name (sans tz)
            curveEnd TIMESTAMPTZ, -- per file name (sans tz)
            month TIMESTAMPTZ,
            control_area_type varchar(100),
            data NUMERIC(20,10),
            control_area varchar(100),
            state varchar(100),
            load_zone varchar(100),
            capacity_zone varchar(100),
            utility varchar(100),
            strip varchar(4),
            cost_group varchar(100),
            cost_component varchar(100),
            utility_name varchar(100),
            profile_load varchar(100)
          );

        -- PTC schema ends here

        -- Matrix schema starts here

          CREATE TABLE trueprice.matrix (
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          sub_cost_component varchar(100),
          term NUMERIC(20,10), 
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          data NUMERIC(20,10)
        );
          CREATE TABLE trueprice.matrix (
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          sub_cost_component varchar(100),
          term NUMERIC(20,10), 
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          data NUMERIC(20,10)
        );

        CREATE TABLE trueprice.matrix_history(
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          curveEnd TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          sub_cost_component varchar(100),
          term NUMERIC(20,10), 
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          data NUMERIC(20,10)
        );
        -- Matrix schema ends here
        CREATE TABLE trueprice.matrix_history(
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          curveEnd TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          sub_cost_component varchar(100),
          term NUMERIC(20,10), 
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          data NUMERIC(20,10)
        );
        -- Matrix schema ends here

          -- headroom calculations schema starts from here
          -- headroom calculations schema starts from here

        CREATE TABLE trueprice.headroom(
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          month TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          headroom NUMERIC(20,10),
          headroom_prct NUMERIC(20,10),
          term NUMERIC(20,10),
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          utility_name varchar(100),
          total_bundled_price NUMERIC(20,10),
          ptc NUMERIC(20,10)
          
        ); 
        CREATE TABLE trueprice.headroom(
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          month TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          headroom NUMERIC(20,10),
          headroom_prct NUMERIC(20,10),
          term NUMERIC(20,10),
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          utility_name varchar(100),
          total_bundled_price NUMERIC(20,10),
          ptc NUMERIC(20,10)
          
        ); 

        CREATE TABLE trueprice.headroom_history(
          id serial PRIMARY KEY,
          curveStart TIMESTAMPTZ,
          curveend TIMESTAMPTZ,
          month TIMESTAMPTZ,
          control_area_type varchar(100),
          control_area varchar(100),
          state varchar(100),
          load_zone varchar(100),
          capacity_zone varchar(100),
          utility varchar(100),
          strip varchar(4),
          cost_group varchar(100),
          cost_component varchar(100),
          headroom NUMERIC(20,10),
          headroom_prct NUMERIC(20,10),
          term NUMERIC(20,10),
          beginning_date TIMESTAMPTZ,
          load_profile varchar(100),
          utility_name varchar(100),
          total_bundled_price NUMERIC(20,10),
          ptc NUMERIC(20,10)
          
        ); 

        -- headroom calculations schema ends here

          -- cron job for Headroom calculations
          CREATE TABLE trueprice.headroom_trigger(
            change_id SERIAL PRIMARY KEY,
            curvestart TIMESTAMPTZ,
            filename varchar(255),
            status varchar(255) Default 'waiting'
          );
          -- cron job for Headroom calculations
          CREATE TABLE trueprice.headroom_trigger(
            change_id SERIAL PRIMARY KEY,
            curvestart TIMESTAMPTZ,
            filename varchar(255),
            status varchar(255) Default 'waiting'
          );

          --notifier v2 changes
          -- email_template_content
          UPDATE trueprice.email_template_contents set body_content = '<html><body><p>Dear {username},<br/> Energy in {location} has {price_shift} by {price_shift_value} resulting in a {price_shift_prct} gain.<br/>The TRUEPrice Team </p></body></html>'
          WHERE template_id=1 and language_id=1 AND subject_content = 'Price Change Alert';
          --notifier v2 changes
          -- email_template_content
          UPDATE trueprice.email_template_contents set body_content = '<html><body><p>Dear {username},<br/> Energy in {location} has {price_shift} by {price_shift_value} resulting in a {price_shift_prct} gain.<br/>The TRUEPrice Team </p></body></html>'
          WHERE template_id=1 and language_id=1 AND subject_content = 'Price Change Alert';

          -- adding matching_id and lookup_id into ptc, matrix, headroom
          ALTER TABLE trueprice.ptc
            ADD COLUMN matching_id TEXT,
            ADD COLUMN lookup_id TEXT;
          ALTER TABLE trueprice.ptc_history
            ADD COLUMN matching_id TEXT,
            ADD COLUMN lookup_id TEXT;

          ALTER TABLE trueprice.matrix
            ADD COLUMN matching_id TEXT,
            ADD COLUMN lookup_id TEXT;
          ALTER TABLE trueprice.matrix_history
            ADD COLUMN matching_id TEXT,
            ADD COLUMN lookup_id TEXT;

          ALTER TABLE trueprice.headroom
            ADD COLUMN matching_id TEXT,
            ADD COLUMN lookup_id TEXT;
          ALTER TABLE trueprice.headroom_history
            ADD COLUMN matching_id TEXT,
            ADD COLUMN lookup_id TEXT;

          ALTER TABLE  trueprice.price_changes_notifications
            ADD notification_date TIMESTAMPTZ DEFAULT '2023-12-12'::TIMESTAMPTZ;

          
          UPDATE trueprice.email_template_contents 
          SET body_content  = '<html><body><p>Dear {username},<br/> Energy in {location} has {price_shift}d by {price_shift_value} resulting in a {price_shift_prct} {gl}.<br/>The TRUEPrice Team </p></body></html>'
          where content_id  = 1;

          CREATE TABLE trueprice.curve_type (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(20),
                    description VARCHAR(20)
                );
                INSERT INTO trueprice.curve_type (name, description) VALUES 
                ('ISONE', 'ISONE'),
                ('ERCOT', 'ERCOT'),
                ('PJM', 'PJM'),
                ('NYISO', 'NYISO'),
                ('MISO', 'MISO');

          CREATE TABLE trueprice.seasons (
              id SERIAL PRIMARY KEY,
              name VARCHAR(20),
              description VARCHAR(20)
          );
          INSERT INTO trueprice.seasons (name, description) VALUES 
          ('Winter', 'Winter'),
          ('Spring', 'Spring'),
          ('Summer', 'Summer'),
          ('Fall', 'Fall');

          CREATE TABLE trueprice.curve_type_seasons (
              id SERIAL PRIMARY KEY,
              season_id INTEGER,
              curve_type_id INTEGER,
              "month" INTEGER
          );
          insert into trueprice.curve_type_seasons (curve_type_id,season_id, month)
          SELECT    
              ct.id as curve_type_id,
              CASE
                  WHEN gs.month BETWEEN 1 AND 2 THEN (select id from trueprice.seasons where name='Winter' limit 1)
                  WHEN gs.month BETWEEN 11 AND 12 THEN (select id from trueprice.seasons where name='Winter' limit 1)
                  WHEN gs.month BETWEEN 3 AND 6 THEN (select id from trueprice.seasons where name='Spring' limit 1)
                  WHEN gs.month BETWEEN 7 AND 8 THEN (select id from trueprice.seasons where name='Summer' limit 1)
                  WHEN gs.month BETWEEN 9 AND 10 THEN (select id from trueprice.seasons where name='Fall' limit 1)
                  ELSE 1 -- This ELSE is technically redundant since all cases are covered
              END AS season_id,
              gs.month
          FROM
              generate_series(1, 12) AS gs(month)
          CROSS JOIN
              trueprice.curve_type ct
          order by ct.name, gs.month;

          CREATE TABLE trueprice.hour_types (
              id SERIAL PRIMARY KEY,
              "hour" INTEGER,
              curve_type_id INTEGER,
              hourtype INTEGER
          );
          insert  into trueprice.hour_types (hour,curve_type_id ,hourtype)
          SELECT
              gs.hour,
              ct.id as curve_type_id ,
              CASE
                  WHEN gs.hour BETWEEN 8 AND 22 THEN 2 --onpeak
                  WHEN gs.hour = 7 AND ct.id = 2 THEN 2 --onpeak
                  WHEN gs.hour = 23 AND ct.id <> 2 THEN 2 --onpeak
                  ELSE 1 --offpeak
              END AS hourtype
          FROM
              generate_series(1, 24) AS gs(hour)
          CROSS JOIN
              trueprice.curve_type ct;
        CREATE TABLE trueprice.hourly_reference_data (
          "ISO" varchar(20) NULL,
          "CalDate" date NULL,
          "Year" numeric NULL,
          "YearType" text NULL,
          "Month" numeric NULL,
          "Season" varchar(20) NULL,
          "Day" numeric NULL,
          "DayType" text NULL,
          "Hour" int4 NULL,
          "HourType" text NULL,
          "BlockType" text NULL
        );
        CREATE TABLE trueprice.monthly_reference_data (
          "ISO" varchar(20) NULL,
          "CalMonth" text NULL,
          "5x16" int8 NULL,
          "7x8" int8 NULL,
          "2x16" int8 NULL,
          "7x24" int8 NULL,
          "WE" int8 NULL,
          "WD" int8 NULL,
          "OnPeak" int8 NULL,
          "OffPeak" int8 NULL
        );


        -- To insert into hourly reference data
        INSERT INTO trueprice.hourly_reference_data("ISO", "CalDate", "Year", "YearType", "Month", "Season", "Day", "DayType", "Hour", "HourType", "BlockType")
        select "ISO", "CalDate","Year","YearType","Month","Season","Day", "DayType", "Hour", hourtypename as "HourType",
        case 
        when "DayType" = 'weekday' and "HourType" = 2 then '5x16'
        when "DayType" = 'weekend' and "HourType" = 2 then '2x16'
        else '7x8' end as "BlockType"
        from 
        (
        select  ct.name as "ISO", date_value::Date as "CalDate", EXTRACT(YEAR FROM date_value) as "Year", 
        CASE
        WHEN (EXTRACT(YEAR FROM date_value) % 4 = 0 AND EXTRACT(YEAR FROM date_value) % 100 != 0) OR (EXTRACT(YEAR FROM date_value) % 400 = 0) THEN 'Leap'
        ELSE 'NonLeap'
        END AS "YearType",
        EXTRACT(MONTH FROM date_value) as "Month",
        s."name" as "Season", 
        EXTRACT(DAY FROM date_value) as "Day",
        CASE WHEN EXTRACT(DOW  FROM date_value) IN (0, 6) THEN 'weekend' else 'weekday' end as "DayType",
        ht.hour as "Hour",
        ht.hourtype as "HourType", (case when ht.hourtype = 1 then 'OffPeak' else 'OnPeak' end) as hourtypeName	
        from generate_series('2000-01-01'::date, '2100-12-31'::date, '1 day'::interval) AS dts(date_value)
        cross join hour_types ht 
        inner join curve_type ct on ct.id = ht.curve_type_id
        inner join curve_type_seasons cts on cts.curve_type_id  = ct.id and cts."month" = EXTRACT(MONTH FROM date_value)
        inner join seasons s on s.id = cts.season_id
        --where ht.curve_type_id = 5
        order by ct.name,date_value,ht.hour
        )
        as derived;


        -- to insert into monthly reference data
        INSERT INTO trueprice.monthly_reference_data("ISO", "CalMonth", "5x16", "7x8", "2x16", "7x24", "WE", "WD", "OnPeak", "OffPeak")
          select 
          "ISO",
          to_char("CalDate", 'YYYY-MM') "CalMonth", 
          COUNT(*) FILTER (WHERE "BlockType" = '5x16') AS "5x16",
          COUNT(*) FILTER (WHERE "BlockType" = '7x8') AS "7x8",
          COUNT(*) FILTER (WHERE "BlockType" = '2x16') AS "2x16",
          COUNT(*) as "7x24",
          COUNT(*) FILTER (WHERE "DayType" = 'weekend') AS "WE",
          COUNT(*) FILTER (WHERE "DayType" = 'weekday') AS "WD",
          COUNT(*) FILTER (WHERE "BlockType" = '5x16' or "BlockType" = '2x16') AS "OnPeak",
          COUNT(*) FILTER (WHERE "BlockType" = '7x8') AS "OffPeak"
          from 
          (
          	select "ISO", "CalDate","Year","YearType","Month","Season","Day", "DayType", "Hour", "HourType","BlockType"
          	from hourly_reference_data hrd  

          ) temp 
          group by "ISO", to_char("CalDate", 'YYYY-MM')
          order by to_char("CalDate", 'YYYY-MM'), "ISO";
        
        ALTER TABLE trueprice.price_changes_notifications ADD created_on timestamptz DEFAULT CURRENT_TIMESTAMP NULL;
        update trueprice.price_changes_notifications set created_on  = '2023-12-12 05:00:00.000 +0000';
        ALTER TABLE trueprice.price_changes_notifications ADD change_with_bounds bool DEFAULT false NULL;

        --drop table trueprice.curve_datatype
        CREATE TABLE trueprice.curve_datatype (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.curve_datatype;

        --drop table trueprice.control_area
        CREATE TABLE trueprice.control_area (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.control_area;

        --drop table trueprice.state
        CREATE TABLE trueprice.state (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.state;

        --drop table trueprice.load_zone
        CREATE TABLE trueprice.load_zone (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.load_zone;

        --drop table trueprice.capacity_zone
        CREATE TABLE trueprice.capacity_zone (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.capacity_zone;

        --drop table trueprice.utility
        CREATE TABLE trueprice.utility (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.utility;

        --drop table trueprice.block_type
        CREATE TABLE trueprice.block_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(4) NOT NULL UNIQUE
        );
        --select * from trueprice.block_type;

        --drop table trueprice.cost_group
        CREATE TABLE trueprice.cost_group (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.cost_group;

        --drop table trueprice.cost_component
        CREATE TABLE trueprice.cost_component (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.cost_component;

        --drop table trueprice.customer_type
        CREATE TABLE trueprice.customer_type (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        );
        --select * from trueprice.customer_type;

        --drop table trueprice.hierarchy
        create table trueprice.hierarchy (
          id SERIAL PRIMARY key,
          curve_datatype_id int, -- energy, non-energy, rec, load-profile etc.
          control_area_id int, -- ercot, isone, miso, nyiso etc
          state_id int,
          load_zone_id int,
          capacity_zone_id int,
          utility_id int,
          block_type_id int,
          cost_group_id int,
          cost_component_id int,
          customer_type_id int,
          FOREIGN KEY (curve_datatype_id) REFERENCES trueprice.curve_datatype(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (control_area_id) REFERENCES trueprice.control_area(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (state_id) REFERENCES trueprice.state(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (load_zone_id) REFERENCES trueprice.load_zone(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (capacity_zone_id) REFERENCES trueprice.capacity_zone(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (utility_id) REFERENCES trueprice.utility(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (block_type_id) REFERENCES trueprice.block_type(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (cost_group_id) REFERENCES trueprice.cost_group(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (cost_component_id) REFERENCES trueprice.cost_component(id) ON DELETE CASCADE ON UPDATE CASCADE,
          FOREIGN KEY (customer_type_id) REFERENCES trueprice.customer_type(id) ON DELETE CASCADE ON UPDATE CASCADE
        );
        --select * from trueprice.hierarchy

        -- Index on the curve_datatype_id column
        CREATE INDEX hierarchy_curve_datatype_id_idx ON trueprice.hierarchy (curve_datatype_id);

        -- Index on the control_area_id column
        CREATE INDEX hierarchy_control_area_id_idx ON trueprice.hierarchy (control_area_id);

        -- Index on the state_id column
        CREATE INDEX hierarchy_state_id_idx ON trueprice.hierarchy (state_id);

        -- Index on the load_zone_id column
        CREATE INDEX hierarchy_load_zone_id_idx ON trueprice.hierarchy (load_zone_id);

        -- Index on the capacity_zone_id column
        CREATE INDEX hierarchy_capacity_zone_id_idx ON trueprice.hierarchy (capacity_zone_id);

        -- Index on the utility_id column
        CREATE INDEX hierarchy_utility_id_idx ON trueprice.hierarchy (utility_id);

        -- Index on the block_type_id column
        CREATE INDEX hierarchy_block_type_id_idx ON trueprice.hierarchy (block_type_id);

        -- Index on the cost_group_id column
        CREATE INDEX hierarchy_cost_group_id_idx ON trueprice.hierarchy (cost_group_id);

        -- Index on the cost_component_id column
        CREATE INDEX hierarchy_cost_component_id_idx ON trueprice.hierarchy (cost_component_id);

        -- Index on the customer_type_id column
        CREATE INDEX hierarchy_customer_type_id_idx ON trueprice.hierarchy (customer_type_id);


        reindex table trueprice.hierarchy;

        --drop table trueprice.loadprofile
        create table trueprice.loadprofile(
          id SERIAL primary key,
          hierarchy_id int,
          curvestart timestamptz,
          "month" timestamptz,
          he int,
          data numeric(20,10),
          FOREIGN KEY (hierarchy_id) REFERENCES trueprice.hierarchy(id)
        )
        --select * from trueprice.loadprofile;

        -- Index on the foreign key column
        CREATE INDEX loadprofile_hierarchy_id_idx ON trueprice.loadprofile (hierarchy_id);

        -- Index on the curvestart column
        CREATE INDEX loadprofile_curvestart_idx ON trueprice.loadprofile (curvestart);

        -- Index on the month column
        CREATE INDEX loadprofile_month_idx ON trueprice.loadprofile ("month");

        --reindex table trueprice.loadprofile;

        reindex database trueprice;

        EOSQL
  # adminer: # for postgres, php admin interface
  #   image: adminer
  #   restart: always
  #   ports:
  #     - "0.0.0.0:8080:8080"
  # grafana:
  #   image: "grafana/grafana-oss"
  #   ports:
  #     - "0.0.0.0:3000:3000"
  # ingestor:
  #   environment:
  #     - PGUSER=docker
  #     - PGPASSWORD=docker
  #     - DATABASE=$${DATABASE}
  #   depends_on:
  #     - postgres-setup-2
  #   build:
  #     context: ../buildContext # relative to vscode project
  #     dockerfile: ./src/Dockerfile-ingestor # relative to context directory
  # trueprice-api:
  #   environment:
  #     - PGUSER=docker
  #     - PGPASSWORD=docker
  #     - DATABASE=$${DATABASE}
  #   depends_on:
  #     - postgres-setup-2
  #   build:
  #     context: ../buildContext
  #     dockerfile: ./src/Dockerfile-trueprice-api
  #   ports:
  #     - "0.0.0.0:5050:5000"


  # --- postgres
  # docker container run --name some-postgres -e POSTGRES_PASSWORD=postgres -p 0.0.0.0:5432:5432 -d postgres
  # create database trueprice;
  # \c trueprice;
  # create table data (id serial PRIMARY KEY, amount NUMERIC(12,8), hour TIMESTAMP);
  # insert into data (amount, hour) values (1.0, TO_TIMESTAMP('6/1/2022', 'MM/DD/YYYY'));
  # select * from data;
  # --- grafana
  # for grafana, use $${DATABASE}:5432
  # docker container run -p 3000:3000 grafana/grafana-oss     
